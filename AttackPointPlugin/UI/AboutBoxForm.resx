<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        jACBgoMAIiEhAFZWVgBubW4AYmJjAE1OUAB0dncAcHJzAAICAgDCxMYABgYGALu9wAAKCgoAFhUVABkZ
        GQCoqqwApKanACoqKgCQkpMAQkJDAEZGRwBKSkoAeXp7AFJSUgBeXl4AhYeHAFlaWgC3uboAERESALS1
        twCvsbQArK2vACUlJQCgoqQAnJ6gAC4uLwCYmpwAlZeYADo5OQB9fn8AamprAGZmZwAODg4AHBwdAB4e
        HwAmJicAlJWXAI2OkABUVVcAY2VmAKmrrQCipacAoKGiAEBBQgCHiosAhYaJAIKDhQBJSUoATU1NAHZ3
        dwBzdHUAV1laAHJydABfX2AAamtsAGFjZQBpaWoAqqyvACAhIQA4OTkAbG1uAGBhYgBjY2MAZ2dnAAEB
        AQADAwMABQUFAAcHBwAJCQkAury+AAsLCwANDQ0AsrS2ABISEwCwsrMAFBQVABYWFwAYGBgAp6mqABoa
        GgClp6gAn6CjAJudnwCXmZsALy8vADExMQCPkZIAPD09AISEhgA/P0AAQ0NDAHx/gABFRUUAfH1+AEdH
        RwB4eXoAS0tLAHV1dQBOTk4AT09QAFFRUQBTU1MAVVVVAFdYWABaW1sAXF1dAGVlZQBhYWEAw8XIAMLF
        xwC+wMIAtri6ABAODgC0trgAEBAQABMTEwCusLIAra6xAKyusACqra4AISAhACEhIgCjpKcAIiIiAKOl
        pgCho6UAJCQkACcnJwCen6IAnZ+hACgpKQApKSoAm5yeAJmbnQAsLC0AlZeZAJOUlgA1NTUAkZKUAJGT
        kwA5OToAjY+RAI6OkQCOj5AAOjo6AI2PjwCMjY4AiImLAIeJigCHiIkAQkREAIaHiABEREQAhIaHAERF
        RgCBg4QASUlIAElISQCAgYMAgYGCAElKSwB/gIIAfn+AAExMTABMTU4ATk9QAHp7fQB7e3wAUVJTAFJT
        VAB2d3kAdnh4AFRUVABUVFYAdHV2AFVWVwBXVlcAVldXAHNzdABxc3QAcnNzAFhYWgBYWVkAcHFyAFpZ
        WgBvcHEAcG9vAG9vcABcW1wAbm5vAGxsbQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIT
        szGIiIiIiIiIMYeHs0Va23A0tIWHiIiIiDGzEyIAjFNDGoWFhYWFhYWEg4WOLXB5eWxTQRqFhYWFGkNT
        jAAxGj+BgYGBgYGBgT+DU8DZKplecIiBgYGBgYGBPxoxAENBAAAAAAAAAAAAGkTAmvlySVAdMQAAAAAA
        AAAAQUMAMRqBAAAAAAAAAIGNlUqmYJ4lUB1hAAAAAAAAAIEaMQCIhYEAAAAAAAAAgryb7al5nmVtPA4A
        AAAAAAAAgYWIAIiFgQAAGlMnhz+DEKOpUX9NyM4eswAAAAAAAACBhYgAiBoAACAQHWc1RRrACqqoTz2U
        ZVG0AAAAAAAAAIGFiAAxgwA/Y/YzWV6dB0gRpaV2nmvFdkQAAAAAAAAAgYWIAEMAAJDl1FQbuE0dfF3N
        S2jSiyR+jQAAAAAAAACBhYgAhSAnHJ4GVhQra55OypY8ML2yXOqKAAAAAAAAAIGFiABDYmw9lMhQ1ltG
        LndKSz6SiST6MkMAAAAAAAAAgYWIAGNsdzNJoE+pdQtc56s9W7bBczWMPwAAAAAAAACBhYgASjsZnPQF
        pqUpXxnfZmppXBIWRIIAAAAAAAAAAIGFiABPgKx0pzn3qE7kKZkNrizvMogAAAAAAAA/gQAAgYWIAKqj
        XTWkD6ekEdlRZgQItz6VIAAAAAAAU2JEgwAAGogAbBCMEKGncRHepBLQia2JM/AjIAAAhGNs6hy6GgCD
        MQC/s4FTWkqhCh6q/+DGKyG11aa5GofDUdRbbmd7PwBDALMaAD8OCQp2rCp5Ol5bskBVmebAxGeXsAQr
        GOGOQUMAhUEAACCVqRIqKmAqHze+Qq9pb6qooL61elW7TRwHsQAxGgAAQcdOdimqdgV//9wGFEJWCzBe
        mefrNpMXc9eQAIiFgQAgjjQRTjnyqf3xfgIVra4smSrpcKVo4sYleMMAiIWBAAAgjTRxqXZ+KaOm71gE
        QkeeOTXRm6E7C2oC1wCIhQAAACATlR19Xuw7HnZuRosGZp4+aKbZmDkLicJoAIiFgYKEkAmaHqDM001z
        bwZGyev4mQYk46U1qGayDQIAMYSDtFdd3aes9ShJLpFpFZd3HnY2IRsuBRyomUa3NgBDIBojm6eqq3mr
        H9iPhovLXx1wdtiLUlxg5lH42hj4ABqBhGSjq195qzt56JeTZnehSzmAoM9JTXapBSmlcDUAQyCEY0qs
        /h8qefx5BU9RPKFRX1+sfn4pqE9RbL+NUwCMDoeKx6QfonV1X05dlXyjq/P7TxEvmqVPqAMjDkMxACIT
        iBqNylEM81/uXThEwKUmck+dliMtTKmfOIgxtI4A/////wAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAE=
</value>
  </data>
</root>